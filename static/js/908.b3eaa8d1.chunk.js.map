{"version":3,"file":"static/js/908.b3eaa8d1.chunk.js","mappings":"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","sources":["components/Form/Form.styled.jsx","components/Form/Form.jsx","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/index.js","components/ContactItem/ContactItem.jsx","components/ContactList/index.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/index.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  width: 500px;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n  padding: 30px;\n\n  margin: 0 auto;\n`;\n\nexport const ContactTitle = styled.h2`\n  text-align: center;\n  margin: 0;\n  margin-bottom: 20px;\n  padding: 0;\n`;\n\nexport const ContactLabel = styled.label`\n  margin-bottom: 5px;\n  font-weight: 700;\n\n  &:not(:first-child) {\n    margin-top: 10px;\n  }\n`;\n\nexport const ContactValue = styled.input`\n  height: 20px;\n  padding-left: 5px;\n\n  transition: all 300ms ease-in-out;\n\n  &:focus {\n    border-color: #ff7b00;\n    box-shadow: 0 0 3px 2px rgb(228 121 17 / 50%);\n    outline: none;\n    border-radius: 5px;\n  }\n`;\n\nexport const AddBtn = styled.button`\n  margin-top: 40px;\n  height: 30px;\n  background-color: #ff7b00;\n  border-radius: 5px;\n  cursor: pointer;\n  color: #fff;\n  font-weight: 600;\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nimport { addContact } from 'redux/contactsOperations';\nimport { selectContacts } from 'redux/selectors';\n\nimport { toast } from 'react-toastify';\n\nimport {\n  Form,\n  ContactLabel,\n  ContactValue,\n  AddBtn,\n  ContactTitle,\n} from './Form.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const sameName = contacts.find(contact => contact.name === name);\n\n    if (sameName) {\n      toast.warning('There is already a contact with such a name.');\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <ContactTitle>Phonebook</ContactTitle>\n\n      <Form onSubmit={handleSubmit}>\n        <ContactLabel htmlFor=\"name\">\n          Name\n          <br />\n        </ContactLabel>\n        <ContactValue\n          id=\"name\"\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          placeholder=\"e.g. Stephen King\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={handleChange}\n        />\n\n        <ContactLabel htmlFor=\"number\">\n          Number\n          <br />\n        </ContactLabel>\n        <ContactValue\n          id=\"number\"\n          type=\"text\"\n          value={number}\n          name=\"number\"\n          placeholder=\"+38-000-000-00-00\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          onChange={handleChange}\n        />\n\n        <AddBtn type=\"submit\">Add contact</AddBtn>\n      </Form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 300px;\n  margin: 0 auto;\n  display: flex;\n  position: relative;\n  padding: 0;\n  flex-direction: column;\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\n\nexport const Text = styled.p`\n  margin: 0;\n  padding: 0;\n`;\n\nexport const DeleteBtn = styled.button`\n  background-color: #ff7b00;\n  border-radius: 5px;\n  cursor: pointer;\n  color: #fff;\n  font-weight: 600;\n  position: absolute;\n  right: 0;\n\n  display: flex;\n  align-items: center;\n`;\n","import ContactItem from './ContactItem';\n\nexport default ContactItem;\n","import { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/contactsOperations';\n\nimport { ImCross } from 'react-icons/im';\nimport PropTypes from 'prop-types';\n\nimport { Item, Text, DeleteBtn } from './ContactItem.styled';\n\nconst ContactItem = ({ contact }) => {\n  const { id, name, number } = contact;\n\n  const dispatch = useDispatch();\n\n  const handleClick = () => dispatch(deleteContact(id));\n\n  return (\n    <Item>\n      <Text>\n        {name}: {number}\n      </Text>\n\n      <DeleteBtn type=\"button\" onClick={handleClick}>\n        Delete\n        <ImCross\n          style={{\n            color: 'red',\n            width: '10',\n            marginLeft: '5',\n          }}\n        />\n      </DeleteBtn>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\nexport default ContactItem;\n","import ContactList from './ContactList';\n\nexport default ContactList;\n","import { useSelector } from 'react-redux';\nimport { useMemo } from 'react';\n\nimport { selectContacts, selectFilter } from 'redux/selectors';\n\nimport { List } from './ContactList.styled';\nimport ContactItem from 'components/ContactItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = useMemo(\n    () =>\n      contacts.filter(({ name }) => {\n        const normalizedFilter = name\n          .toLowerCase()\n          .includes(filter.trim().toLowerCase());\n\n        return normalizedFilter;\n      }),\n    [contacts, filter]\n  );\n\n  return (\n    <List>\n      {filteredContacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact} />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  text-align: center;\n`;\n\nexport const FilterTitle = styled.h2`\n  text-align: center;\n  margin-top: 60px;\n`;\n\nexport const FilterLabel = styled.label`\n  font-weight: 700;\n  margin-bottom: 5px;\n  display: block;\n`;\n\nexport const FilterValue = styled.input`\n  height: 20px;\n  width: 300px;\n  padding-left: 5px;\n  margin-bottom: 20px;\n  transition: all 300ms ease-in-out;\n\n  &:focus {\n    border-color: #ff7b00;\n    box-shadow: 0 0 3px 2px rgb(228 121 17 / 50%);\n    outline: none;\n    border-radius: 5px;\n  }\n`;\n","import Filter from './Filter';\n\nexport default Filter;\n","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\n\nimport { selectFilter } from 'redux/selectors';\nimport { updateFilter } from 'redux/filterSlice';\n\nimport {\n  Wrapper,\n  FilterLabel,\n  FilterValue,\n  FilterTitle,\n} from './Filter.styled';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { value } = e.target;\n\n    dispatch(updateFilter(value));\n  };\n\n  return (\n    <Wrapper>\n      <FilterTitle>Contacts</FilterTitle>\n      <FilterLabel htmlFor=\"text\">\n        Find contacts by name\n        <br />\n      </FilterLabel>\n      <FilterValue\n        id=\"text\"\n        type=\"text\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </Wrapper>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/Form/Form';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nimport { useSelector } from 'react-redux';\n\nimport { RotatingLines } from 'react-loader-spinner';\n\nimport { selectIsLoading } from 'redux/selectors';\nimport { selectError } from 'redux/selectors';\n\nimport { fetchContacts } from 'redux/contactsOperations';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      {isLoading && !error && (\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <RotatingLines\n            strokeColor=\"#ff7b00\"\n            strokeWidth=\"5\"\n            animationDuration=\"0.75\"\n            width=\"50\"\n            visible={true}\n          />\n        </div>\n      )}\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","ContactTitle","ContactLabel","ContactValue","AddBtn","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","selectContacts","handleChange","e","target","value","onSubmit","preventDefault","find","contact","toast","addContact","htmlFor","id","type","placeholder","pattern","title","required","onChange","List","Item","Text","DeleteBtn","onClick","deleteContact","style","color","width","marginLeft","filter","selectFilter","filteredContacts","useMemo","toLowerCase","includes","trim","map","Wrapper","FilterTitle","FilterLabel","FilterValue","updateFilter","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","display","justifyContent","alignItems","strokeColor","strokeWidth","animationDuration","visible"],"sourceRoot":""}